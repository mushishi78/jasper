%YAML 1.2
---
name: Jasper
file_extensions: [jasp]
scope: source.jasp
variables:
  name: \w+
  namespace: '\w+\:'
  objects: \w+\.
  identifier: '{{namespace}})?({{objects}})*({{name}})'
  indent: '    '
  type:
    '(?x)
      (?<type> \g<array> | \g<dictionary> | \g<callback> | \g<identifier> )
      (?<array> \[ \g<type> \] ){0}
      (?<dictionary> \{ \g<type> \} ){0}
      (?<callback> < \g<type> > ){0}
      (?<identifier> ({{identifier}}|\`{{name}}){0}
    (?-x)'

## References
## https://github.com/sublimehq/Packages/issues/757

contexts:
  main:
    - include: comments

    - include: function_definition
    - include: type_definition
    - include: ffi_definition
    - include: singletons

    - include: invoke
    - include: conditional_branches
    - include: control_flow
    - include: loops
    - include: assignment

  comments:
    - match: '^\s*(!.*)'
      captures:
        1: comment.line.jasp

## Top level
##############################################################

  function_definition:
    - match: '^(\()({{name}})'
      captures:
        1: punctuation.definition.begin
        2: entity.name.function
      push:
        - include: comments
        - match: '({{name}}|\.|\.\.|\<)\s+({{type}})'
          captures:
            1: variable.parameter
            2: storage.type
        - match: (\))
          captures:
            1: punctuation.definition.end
          pop: true

  type_definition:
    - match: '^(\|)\s+({{name}})'
      captures:
        1: punctuation.definition.keyword
        2: entity.name.function.constructor
      push:
        - include: comments
        - match: '({{name}})\s+({{type}})'
          captures:
            1: variable.parameter
            2: storage.type
        - match: (\|)
          captures:
            1: punctuation.definition.end
          pop: true
    - match: '^(&)\s+({{name}})'
      captures:
        1: punctuation.definition.keyword
        2: entity.name.function.constructor
      push:
        - include: comments
        - match: '({{name}})\s+({{type}})'
          captures:
            1: variable.parameter
            2: storage.type
        - match: (&)
          captures:
            1: punctuation.definition.end
          pop: true
    - match: '^(\+)\s+({{name}})\s+({{type}})'
      captures:
        1: punctuation.definition.keyword
        2: entity.name.function.constructor
        3: storage.type
    - match: '^(#)\s+({{name}})'
      captures:
        1: punctuation.definition.keyword
        2: entity.name.function.constructor
      push:
        - include: comments
        - match: '({{name}})'
          captures:
            1: variable.parameter
        - match: (#)
          captures:
            1: punctuation.definition.end
          pop: true

  ffi_definition:
    - match: '^(function)\s+(\()({{name}})'
      captures:
        1: storage.type.keyword.function
        2: punctuation.definition.begin
        3: entity.name.function
      push:
        - include: comments
        - match: '({{name}}|\.|\.\.|\<)\s+({{type}})'
          captures:
            1: variable.parameter
            2: storage.type
        - match: (\))
          captures:
            1: punctuation.definition.end            
          set: Packages/JavaScript/JavaScript.sublime-syntax
          with_prototype:
            - match: ';;'
              scope: punctuation.definition.end
              set: main
  singletons:
    - match: '^(\$)\s+({{name}})\s+({{type}})'
      captures:
        1: punctuation.definition.keyword
        2: entity.name.function
        3: storage.type

## Statements
##############################################################

  invoke:
    - match: '\s+(\.) (\()({{namespace}})?({{objects}})*({{name}})'
      captures:
        1: keyword.control.flow
        2: punctuation.separator
        3: entity.name.namespace
        4: variable.other
        5: entity.name.function
      push:
        - include: comments
        - match: '({{name}}|\.|\.\.) '
          captures:
            1: variable.parameter
          push: expression
        - match: '\)'
          scope: punctuation.definition.end
          pop: true

  conditional_branches:
    - match: '^\s+(\:?\?) '
      scope: keyword.control.conditional
      push: expression
    - match: '^\s+:\s+'
      scope: keyword.control.conditional

  control_flow:
    - match: '(@\^|@;)'
      scope: keyword.control.flow
    - match: '<$'
      scope: keyword.control.flow
    - match: '< '
      scope: keyword.control.flow
      push: expression

  loops:
    - match: '(@) (\d+) ({{name}})'
      captures:
        1: keyword.control.conditional
        2: constant.numeric.integer
        3: variable.parameter
    - match: '(@) (\d+)'
      captures:
        1: keyword.control.conditional
        2: constant.numeric.integer
    - match: '(@) ({{namespace}})?({{objects}})*({{name}}) ({{name}}) ({{name}})'
      captures:
        1: keyword.control.conditional
        2: entity.name.namespace
        3: variable.other
        4: variable
        5: variable.parameter
        6: variable.parameter
    - match: '(@) ({{namespace}})?({{objects}})*({{name}}) ({{name}})'
      captures:
        1: keyword.control.conditional
        2: entity.name.namespace
        3: variable.other
        4: variable
        5: variable.parameter

  assignment:
    - match: '(=) ({{namespace}})?({{objects}})*({{name}}) '
      captures:
        1: keyword.operator.assignment
        2: entity.name.namespace
        3: variable.other
        4: variable
      push: expression


## Expressions
##############################################################

  expression:
    - include: s_expressions
    - include: function_invocation
    - include: string
    - include: number
    - include: boolean
    - include: void
    - include: hash
    - include: identifier

  s_expressions:
    - match: '(\[)(!|~|&|=|!=|>=|>|<=|<)(?=\s)'
      captures:
        1: punctuation.begin
        2: keyword.operator.logical
      set:
        - match: \]
          scope: punctuation.end
          pop: true
        - match: (?=\S)
          push: expression
    - match: '(\{)(/|\*\*|\*|\+|\%|-)(?=\s)'
      captures:
        1: punctuation.begin
        2: keyword.operator.arithmetic
      set:
        - match: \}
          scope: punctuation.end
          pop: true
        - match: (?=\S)
          push: expression

  function_invocation:
    - match: '(\()({{namespace}})?({{objects}})*({{name}}|{{type}})'
      captures:
        1: punctuation.separator
        2: entity.name.namespace
        3: variable.other
        4: entity.name.function
      set:
        - include: comments
        - match: '(~{{name}})'
          captures:
            1: variable.parameter
        - match: '({{name}}|\.|\.\.) '
          captures:
            1: variable.parameter
          push: expression
        - match: '(\#)({{name}}) '
          captures:
            1: punctuation.definition.keyword
            2: variable
          push: expression
        - match: '\)'
          scope: punctuation.definition.end
          pop: true

  string:
    - match: \'
      scope: punctuation.definition.string.begin
      set:
        - meta_scope: string.quoted.double
        - match: \\[\'\\{}]
          scope: constant.character.escape
        - match: \{
          scope: punctuation.separator.begin
          push:
            - match: (?!\})
              set: expression
            - match: \}
              scope: punctuation.separator.end
              pop: true
        - match: \'
          scope: punctuation.definition.string.end
          pop: true

  number:
    - match: '\d+\.\d+'
      scope: constant.numeric.float
      pop: true
    - match: '\d+'
      scope: constant.numeric.integer
      pop: true

  boolean:
    - match: '(true|false)'
      scope: constant.lanuage
      pop: true

  void:
    - match: '_'
      scope: constant.lanuage
      pop: true

  hash:
    - match: '(#)({{name}})'
      captures:
        1: punctuation.definition.keyword
        2: variable
      pop: true

  identifier:
    - match: '({{namespace}})?({{objects}})*({{name}})'
      captures:
        1: entity.name.namespace
        2: variable.other
        3: variable
      pop: true

